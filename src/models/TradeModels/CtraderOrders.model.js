import mongoose from "mongoose";
import paginate from "mongoose-paginate-v2";
import aggregatePaginate from "mongoose-aggregate-paginate-v2";

const CtraderOrdersSchema = new mongoose.Schema(
  {
    // Our fields
    user: { type: mongoose.Types.ObjectId, ref: "Users" },
    account: { type: mongoose.Types.ObjectId, ref: "UserAccounts" },
    position: { type: mongoose.Types.ObjectId, ref: "CtraderPositions" },
    // Ctrader fields
    orderId: String,
    clientOrderId: String,
    positionId: String,
    environment_type: String,
    tradeData: {
      symbolId: String,
      traderId: String,
      volume: Number,
      tradeSide: String,
      openTimestamp: Date,
      closeTimestamp: Date,
      label: String,
      comment: String,
      channel: String,
      measurementUnits: String,
      lotSize: String,
      spreadBetting: Boolean,
      stake: String,
      desiredVWAP: Number,
      guaranteedStopLoss: Boolean,
    },
    orderType: String,
    orderStatus: String,
    executionPrice: Number,
    executedVolume: String,
    utcLastUpdateTimestamp: Date,
    bookType: String,
    closingOrder: Boolean,
    commission: String,
    timeInForce: String,
    introducingBrokerCommission: String,
    pocketCommission: String,
    pocketMarkup: String,
    mirroringCommission: String,
    checkTolerance: Boolean,
    moneyDigits: Number,
    expirationTimestamp: Date,
    stopLoss: Number,
    takeProfit: Number,
    method: String,
    baseSlippagePrice: Number,
    limitPrice: Number,
    stopPrice: Number,
    relativeStopLoss: String,
    relativeTakeProfit: String,
    originalClientOrderId: String,
    login: String,
    name: String,
    lastName: String,
    isStopOut: Boolean,
    trailingStopLoss: Boolean,
    closeWithPID: String,
    stopTriggerMethod: String,
    stopLossTriggerMethod: String,
    slippageInPoints: Number,
    desiredOpenTimestamp: Date,
    ocoOrderId: String,
    login: String,
  },
  { timestamps: true }
);

CtraderOrdersSchema.plugin(paginate);
CtraderOrdersSchema.plugin(aggregatePaginate);

export default mongoose.model("CtraderOrders", CtraderOrdersSchema);

export const CTRADER_ORDERS_FIELDS = {
  userId: { value: "user", label: "User ID" },
  accountId: { value: "account", label: "Account ID" },
  positionId: { value: "position", label: "Position ID" },
  orderId: { value: "orderId", label: "Order ID" },
  clientOrderId: { value: "clientOrderId", label: "Client Order ID" },
  symbolId: { value: "tradeData.symbolId", label: "Symbol ID" },
  traderId: { value: "tradeData.traderId", label: "Trader ID" },
  volume: { value: "tradeData.volume", label: "Volume" },
  tradeSide: { value: "tradeData.tradeSide", label: "Trade Side" },
  openTimestamp: { value: "tradeData.openTimestamp", label: "Open Timestamp" },
  closeTimestamp: {
    value: "tradeData.closeTimestamp",
    label: "Close Timestamp",
  },
  label: { value: "tradeData.label", label: "Label" },
  comment: { value: "tradeData.comment", label: "Comment" },
  channel: { value: "tradeData.channel", label: "Channel" },
  measurementUnits: {
    value: "tradeData.measurementUnits",
    label: "Measurement Units",
  },
  lotSize: { value: "tradeData.lotSize", label: "Lot Size" },
  spreadBetting: { value: "tradeData.spreadBetting", label: "Spread Betting" },
  stake: { value: "tradeData.stake", label: "Stake" },
  desiredVWAP: { value: "tradeData.desiredVWAP", label: "Desired VWAP" },
  guaranteedStopLoss: {
    value: "tradeData.guaranteedStopLoss",
    label: "Guaranteed Stop Loss",
  },
  orderType: { value: "orderType", label: "Order Type" },
  orderStatus: { value: "orderStatus", label: "Order Status" },
  executionPrice: { value: "executionPrice", label: "Execution Price" },
  executionVolume: { value: "executedVolume", label: "Execution Volume" },
  utcLastUpdateTimestamp: {
    value: "utcLastUpdateTimestamp",
    label: "UTC Last Update Timestamp",
  },
  bookType: { value: "bookType", label: "Book Type" },
  closingOrder: { value: "closingOrder", label: "Closing Order" },
  commission: { value: "commission", label: "Commission" },
  timeInForce: { value: "timeInForce", label: "Time In Force" },
  introducingBrokerCommission: {
    value: "introducingBrokerCommission",
    label: "Introducing Broker Commission",
  },
  pocketCommission: { value: "pocketCommission", label: "Pocket Commission" },
  pocketMarkup: { value: "pocketMarkup", label: "Pocket Markup" },
  mirroringCommission: {
    value: "mirroringCommission",
    label: "Mirroring Commission",
  },
  checkTolerance: { value: "checkTolerance", label: "Check Tolerance" },
  moneyDigits: { value: "moneyDigits", label: "Money Digits" },
  expirationTimestamp: {
    value: "expirationTimestamp",
    label: "Expiration Timestamp",
  },
  stopLoss: { value: "stopLoss", label: "Stop Loss" },
  takeProfit: { value: "takeProfit", label: "Take Profit" },
  method: { value: "method", label: "Method" },
  baseSlippagePrice: {
    value: "baseSlippagePrice",
    label: "Base Slippage Price",
  },
  limitPrice: { value: "limitPrice", label: "Limit Price" },
  stopPrice: { value: "stopPrice", label: "Stop Price" },
  relativeStopLoss: { value: "relativeStopLoss", label: "Relative Stop Loss" },
  relativeTakeProfit: {
    value: "relativeTakeProfit",
    label: "Relative Take Profit",
  },
  originalClientOrderId: {
    value: "originalClientOrderId",
    label: "Original Client Order ID",
  },
  login: { value: "login", label: "Login" },
  name: { value: "name", label: "Name" },
  lastName: { value: "lastName", label: "Last Name" },
  isStopOut: { value: "isStopOut", label: "Is Stop Out" },
  trailingStopLoss: { value: "trailingStopLoss", label: "Trailing Stop Loss" },
  closeWithPID: { value: "closeWithPID", label: "Close With PID" },
  stopTriggerMethod: {
    value: "stopTriggerMethod",
    label: "Stop Trigger Method",
  },
  stopLossTriggerMethod: {
    value: "stopLossTriggerMethod",
    label: "Stop Loss Trigger Method",
  },
  slippageInPoints: { value: "slippageInPoints", label: "Slippage In Points" },
  desiredOpenTimestamp: {
    value: "desiredOpenTimestamp",
    label: "Desired Open Timestamp",
  },
  ocoOrderId: { value: "ocoOrderId", label: "OCO Order ID" },
  createdAt: { value: "createdAt", label: "Created At" },
  updatedAt: { value: "updatedAt", label: "Updated At" },
};
